import numpy          as np
#import inform_gain    as ig
#import redundancy_svd as rsvd



# Load Parameters
def load_config():
    
    param = np.loadtxt("cnf_sv.csv", delimiter='\n')
    
    return(param)
# Load data 
def load_data():
    
    clase = {
        'normal': 1, 'neptune': 2, 'teardrop': 2, 'smurf': 2, 'pod': 2, 'back': 2,
        'land': 2, 'apache2': 2, 'processtable': 2, 'mailbomb': 2, 'udpstorm': 2, 'ipsweep': 3,
        'portsweep': 3, 'nmap': 3, 'satan': 3, 'saint': 3, 'mscan': 3, 'warezclient': 0,
        'guess_passwd': 0, 'ftp_write': 0, 'multihop': 0, 'rootkit': 0, 'buffer_overflow': 0, 'imap': 0,
        'warezmaster': 0, 'phf': 0, 'loadmodule':0, 'spy': 0, 'snmpgetattack': 0, 'httptunnel':0,
        'ps': 0, 'snmpguess': 0, 'named': 0, 'sendmail': 0, 'xterm': 0, 'worm': 0, 'tcp': 0,
        'xlock': 0, 'perl': 0, 'xsnoop': 0, 'sqlattack': 0
    }
    
    data = np.loadtxt("KDDTrain.txt", delimiter=',', dtype='str')
    
    columna_categorica = data[:, 41]

    ##columna_categorica_transformada = np.vectorize(clase.get)(columna_categorica)
    mapeo_func = np.vectorize(lambda x: clase.get(x, x))  # Si la clase no está en el diccionario, se mantiene igual
    columna_categorica_transformada = mapeo_func(columna_categorica)

    data[:, 41] = columna_categorica_transformada
    
    indices_eliminar = np.where(data[:, 41] == "0")
    
    data = np.delete(data, indices_eliminar, axis=0)
    
    columnas_categoricas = data[:, 1:4]

    # Crear un diccionario para almacenar el mapeo de categorías a números
    mapeo_categorias = {}

    # Convertir variables categóricas a números únicos solo para las columnas 2, 3 y 4
    for columna in range(3):  # Iterar solo sobre las primeras 3 columnas
        valores_unicos = np.unique(columnas_categoricas[:, columna])
        mapeo = {valor: idx + 1 for idx, valor in enumerate(valores_unicos)}
        mapeo_categorias[columna + 1] = mapeo  # Usar columna + 1 como clave para el mapeo (empezando desde 1)
        columnas_categoricas[:, columna] = np.vectorize(mapeo.get)(columnas_categoricas[:, columna])

    data[:, 1:4] = columnas_categoricas
    
    data_float = data.astype(float)
    
    ##nomalizacion-----------------------------------------------------------
    data_clase=data_float[:,41]
    data_normalazar=data_float[:,:-2]
    
    a=0.01
    b=0.99
    min_valores = np.min(data_normalazar, axis=0)
    max_valores = np.max(data_normalazar, axis=0)
    data_normalizada = ((data_normalazar - min_valores) / ((max_valores - min_valores)+(10**-20)))*(b-a)+a
        
    data_final=np.concatenate((data_normalizada, data_clase.reshape(-1, 1)), axis=1)   
    
    ##nomalizacion-----------------------------------------------------------
              
    return(data_final)

def IG_new(X, Y):
    num_caracteristicas = X.shape[1]
    I_set = information(Y)
    entropia_variable = []

    D = np.zeros((1,3))

    for i in range(num_caracteristicas):
        valores_unicos, contador_unicos = np.unique(X[:,i], return_counts=True)
        valor_minimo = valores_unicos.min()
        valor_maximo = valores_unicos.max()

        rango = valor_maximo - valor_minimo

        B = np.trunc(np.sqrt( X.shape[0])).astype(np.int64) # numero de intervalos

        #print(valor_minimo, " ", valor_maximo, " ", B)
        resolucion = rango / (B-1)
        #indxs = np.linspace(0,B,B+1) * resolucion + valor_minimo
        
        indices = np.linspace(valor_minimo, valor_maximo, B+1)

        #print(indxs - indices)
        indices[B] = indices[B] + 1

        valor_acumulado = 0
        for j in range(indices.shape[0]-1):
            condicion_valida = (X[:,i] >= indices[j]) & (X[:,i] < indices[j+1])
            #condicion_valida = (X[:,i] >= indices[j]) 
            intervalo_j = Y[condicion_valida] #and X[:,i] < indices[j+1]
            #print(X[condicion_valida,i].shape, " ", intervalo_j.shape)
            
            #print(np.unique(intervalo_j))
            valor_acumulado = valor_acumulado + information(intervalo_j) * intervalo_j.shape[0] # (np.unique(intervalo_j))
        #print()
        #if(i == 4):
        #    print(I_set, " ", valor_acumulado)
        #    print(I_set - valor_acumulado / (Y.shape[0]) )
        entropia_variable.append(I_set - (valor_acumulado / Y.shape[0]) )
        #print(indices.shape[0])

    return entropia_variable

# selecting variables
def select_vars(X,param):
	
    np.random.shuffle(X)
    
    n_muestras=X.shape
    
    Bins=np.sqrt(n_muestras[0])
    
    Bins=np.floor(Bins)
    
    columna_categorica = data[:, 41]
    
    data_clase=X[:,41]
    data_variables=X[:,:-2]
    
    IG_new(X, data_clase):
    
    
    
    

    return()

#save results
def save_results(gain,idx,V):
    
    np.savetxt('gain_values.csv', gain, delimiter=',', fmt='%.10f')
    np.savetxt('gain_idx.csv', idx, delimiter=',', fmt='%d')
    np.savetxt('filter_v.csv', V, delimiter=',', fmt='%.10f')
    
    return

#-------------------------------------------------------------------
# Beginning ...
def main():
    param        = load_config()   
    
       
    X            = load_data() 
    
    select_vars(X,param)
    
    #[gain idx  V] = select_vars(X,param) 
                    
    save_results([1,2,3],[1,5,3],[1,2,6])
       
if __name__ == '__main__':   
	 main()
